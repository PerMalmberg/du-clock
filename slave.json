{"slots":{"0":{"name":"slot1","type":{"methods":[],"events":[]}},"1":{"name":"slot2","type":{"methods":[],"events":[]}},"2":{"name":"slot3","type":{"methods":[],"events":[]}},"3":{"name":"slot4","type":{"methods":[],"events":[]}},"4":{"name":"slot5","type":{"methods":[],"events":[]}},"5":{"name":"slot6","type":{"methods":[],"events":[]}},"6":{"name":"slot7","type":{"methods":[],"events":[]}},"7":{"name":"slot8","type":{"methods":[],"events":[]}},"8":{"name":"slot9","type":{"methods":[],"events":[]}},"9":{"name":"slot10","type":{"methods":[],"events":[]}},"-1":{"name":"unit","type":{"methods":[],"events":[]},"_elementType":"control"},"-2":{"name":"system","type":{"methods":[],"events":[]},"_elementType":"system"},"-3":{"name":"library","type":{"methods":[],"events":[]},"_elementType":"library"}},"handlers":[{"key":"0","filter":{"slotKey":-1,"signature":"start()","args":[]},"code":"package.preload['link_elements'] = (function (...)\nlinkedCore = nil\r\nlinkedScreen = {}\r\nlinkedContainer = {}\r\nlinkedSwitch = {}\r\nlinkedButton = {}\r\nlinkedEmitter = {}\r\nlinkedReceiver = {}\r\nlinkedLight = {}\r\nlinkedIndustry = {}\r\nlinkedDatabank = {}\r\n\r\nlocal slots = {slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8, slot9, slot10}\r\n\r\nfunction linkElements()\r\n    for i = 1, #slots do\r\n        if slots[i] ~= nil then\r\n            local elementClass = slots[i].getElementClass()\r\n\r\n            if elementClass == 'CoreUnitStatic'\r\n            or elementClass == 'CoreUnitSpace'\r\n            or elementClass == 'CoreUnitDynamic' then\r\n                linkedCore = slots[i]\r\n            elseif (elementClass == 'ScreenUnit') then\r\n                table.insert(linkedScreen, #linkedScreen + 1, slots[i])\r\n            elseif (elementClass == 'ItemContainer') then\r\n                table.insert(linkedContainer, #linkedContainer + 1, slots[i])\r\n            elseif (elementClass == 'ManualSwitchUnit') then\r\n                table.insert(linkedSwitch, #linkedSwitch + 1, slots[i])\r\n            elseif (elementClass == 'ManualButtonUnit') then\r\n                table.insert(linkedButton, #linkedButton + 1, slots[i])\r\n            elseif (elementClass == 'EmitterUnit') then\r\n                table.insert(linkedEmitter, #linkedEmitter + 1, slots[i])\r\n            elseif (elementClass == 'ReceiverUnit') then\r\n                table.insert(linkedReceiver, #linkedReceiver + 1, slots[i])\r\n            elseif (elementClass == 'LightUnit') then\r\n                table.insert(linkedLight, #linkedLight + 1, slots[i])\r\n            elseif (elementClass == 'IndustryUnit') then\r\n                table.insert(linkedIndustry, #linkedIndustry + 1, slots[i])\r\n            elseif (elementClass == 'DataBankUnit') then\r\n                table.insert(linkedDatabank, #linkedDatabank + 1, slots[i])\r\n            else                \r\n                system.print(elementClass)\r\n            end\r\n        end\r\n    end\r\nend\r\n end)\npackage.preload['time_util'] = (function (...)\nTimeUtil = {}\n\nfunction TimeUtil.getTime(value)\n    o = {}\n    local now = value or system.getTime()\n    o.day = math.floor(now / (24*3600))\n    now = now % (24 * 3600)\n    o.hour = math.floor(now / 3600)\n    now = now % 3600\n    o.minute = math.floor(now / 60)\n    now = now % 60\n    o.second = math.floor(now)\n    return o\nend\n\nfunction TimeUtil.getClientTime()\n    return system.getTime()\nend end)\npackage.preload['list'] = (function (...)\nList = {}\n\nfunction List.new ()\n    return {first = 0, last = -1}\nend\n\nfunction List.pushleft (list, value)\n    local first = list.first - 1\n    list.first = first\n    list[first] = value\nend\n\nfunction List.pushright (list, value)\n    local last = list.last + 1\n    list.last = last\n    list[last] = value\nend\n\nfunction List.popleft (list)\n    local first = list.first\n    if first > list.last then error(\"list is empty\") end\n    local value = list[first]\n    list[first] = nil        -- to allow garbage collection\n    list.first = first + 1\n    return value\nend\n\nfunction List.popright (list)\n    local last = list.last\n    if List.isempty(list) then error(\"list is empty\") end\n    local value = list[last]\n    list[last] = nil         -- to allow garbage collection\n    list.last = last - 1\n    return value\nend\n\nfunction List.isempty(list)\n    return list.first > list.last\nend end)\nrequire('link_elements')\nrequire('list')\nrequire('time_util')\n\n--[[\n\nSlave clock device v0.0.1\n\nLink ligts as follows:\nUnit 1: Hours 0-5\nUnit 2: Hours 6-11\nUnit 3: Minute 0-8\nUnit 4: Minute 9-17\nUnit 5: Minute 18-26\nUnit 6: Minute 27-35\nUnit 7: Minute 36-44\nUnit 8: Minute 45-53\nUnit 9: Minute 54-59\n\nLink lights, in ascending order, starting at minute 0 (i.e. top of the hour), before the databank, which goes into the last slot.\nDo not rename slots.\n\n]]--\n\nlocal unitNumber = 1 --export: Set to the unit number correpsonding to the lights the device is connected to.\n\nlocal timeMode = 0 -- Operational timeMode. 0 for hours, 1 for minutes, 2 for seconds\nlocal lowerSpan = 0 -- The lower hour/minute/second to work with, inclusive, 12h format, start at 0.\nlocal upperSpan = 0 -- The upper hour/minute/second to work with, inclusive, 12h format, start at 0. Must be within 9 from lowerSpan (only nine slots to work with)\n\nlocal baseTime = 0 -- The time used as the base. Read from the databank.\nlocal displayMode = 1 -- Display mode, 0 for single light, 1 for fill, read from the databank\n\nlocal HOURS = 0\nlocal MINUTES = 1\nlocal SECONDS = 2\nlocal DISPLAY_MODE_SINGLE = 0\nlocal DISPLAY_MODE_FILL = 1\n\nlocal lightQueue = List.new()\n\nlocal offR, offG, offB\nlocal onR, onG, onB\nlocal secOffR, secOffG, secOffB\n\nscript = {}\n\nfunction setupDevice()\n    if unitNumber == 1 then\n        timeMode = HOURS\n        lowerSpan = 0\n        upperSpan = 5\n    elseif unitNumber == 2 then\n        timeMode = HOURS\n        lowerSpan = 6\n        upperSpan = 11\n    elseif unitNumber == 3 then\n        timeMode = MINUTES\n        lowerSpan = 0\n        upperSpan = 8\n    elseif unitNumber == 4 then\n        timeMode = MINUTES\n        lowerSpan = 9\n        upperSpan = 17\n    elseif unitNumber == 5 then\n        timeMode = MINUTES\n        lowerSpan = 18\n        upperSpan = 26\n    elseif unitNumber == 6 then\n        timeMode = MINUTES\n        lowerSpan = 27\n        upperSpan = 35\n    elseif unitNumber == 7 then\n        timeMode = MINUTES\n        lowerSpan = 36\n        upperSpan = 44\n    elseif unitNumber == 8 then\n        timeMode = MINUTES\n        lowerSpan = 45\n        upperSpan = 53\n    elseif unitNumber == 9 then\n        timeMode = MINUTES\n        lowerSpan = 54\n        upperSpan = 59\n    else\n        system.print(\"Invalid unitNumber\")\n        unit.exit()\n    end\n\n    displayMode = linkedDatabank[1].getIntValue(\"displaymode\")\nend\n\nfunction parseColors()\n    \n    local pattern = \"(%d+)%s+(%d+)%s+(%d+)\"\n    \n    local offColor = linkedDatabank[1].getStringValue(\"offcolor\")\n    local r, g, b = string.match(offColor, pattern)\n    offR = tonumber(r)\n    offG = tonumber(g)\n    offB = tonumber(b)\n    \n    local onColor = linkedDatabank[1].getStringValue(\"oncolor\")\n    local r, g, b = string.match(onColor, pattern)\n    onR = tonumber(r)\n    onG = tonumber(g)\n    onB = tonumber(b)\n    \n    local secondaryFillColor = linkedDatabank[1].getStringValue(\"secondaryfillcolor\")\n    local r, g, b = string.match(secondaryFillColor, pattern)\n    secOffR = tonumber(r)\n    secOffG = tonumber(g)\n    secOffB = tonumber(b)\nend\n\nfunction script.onStart()\n    unit.hide()\n    linkElements()\n    setupDevice()\n    parseColors()\n    turnOffAllLights()\n    baseTime = linkedDatabank[1].getIntValue(\"base\")\n    unit.setTimer(\"second\", 1)\nend\n\nfunction script.onStop()\n    turnOffAllLights()\nend\n\nfunction script.onTick(event)\n    if event == \"second\" then\n        local now = TimeUtil.getTime(linkedDatabank[1].getIntValue(\"elapsed\") + baseTime)\n        -- Put a command to update the time at the end of the frame for synched updates.        \n        List.pushright(lightQueue, now)\n    end\nend\n\nfunction script.onUpdate()\n    if not List.isempty(lightQueue) then\n        local now = List.popleft(lightQueue)\n\n        local lightToTurnOn\n        local currentTimePoint\n\n        if timeMode == HOURS then\n            if now.hour >= 12 then -- Must adjust to 12 hour, analog clock\n                now.hour = now.hour - 12\n            end\n\n            lightToTurnOn = now.hour - lowerSpan\n            currentTimePoint = now.hour\n        elseif timeMode == MINUTES then\n            lightToTurnOn = now.minute - lowerSpan\n            currentTimePoint = now.minute\n        elseif timeMode == SECONDS then\n            lightToTurnOn = now.second - lowerSpan\n            currentTimePoint = now.second\n        end\n\n        lightToTurnOn = lightToTurnOn + 1 -- Since slots are 1-indexed\n\n        if displayMode == DISPLAY_MODE_SINGLE then\n            display_single(currentTimePoint, lightToTurnOn)\n        elseif displayMode == DISPLAY_MODE_FILL then\n            display_fill(currentTimePoint, lightToTurnOn)\n        end\n    end\nend\n\nfunction withinRange(currentTimePoint)\n    return currentTimePoint >= lowerSpan and currentTimePoint <= upperSpan\nend\n\nfunction hasReachedSection(currentTimePoint)\n    return currentTimePoint >= lowerSpan\nend\n\nfunction display_single(currentTimePoint, lightToTurnOn)\n    for k, v in ipairs(linkedLight) do\n        if k == lightToTurnOn and withinRange(currentTimePoint) then\n            turnOnLight(v, onR, onG, onB)\n        else\n            turnOffLight(v)\n        end                    \n    end\nend\n\nfunction display_fill(currentTimePoint, lightToTurnOn)\n    if hasReachedSection(currentTimePoint) then\n        for k, v in ipairs(linkedLight) do        \n            if k == lightToTurnOn then\n                turnOnLight(v, onR, onG, onB)\n            elseif k < lightToTurnOn then                \n                turnOnLight(v, secOffR, secOffG, secOffB)\n            else\n                turnOffLight(v)\n            end        \n        end\n    else\n        turnOffAllLights()\n    end\nend\n\nfunction validate()\n    if timeMode ~= HOURS and timeMode ~= MINUTES and timeMode ~= SECONDS then\n        system.print(\"Invalid mode\")\n        unit.exit()\n    end\nend\n\nfunction turnOffLight(light)\n    light.setRGBColor(offR, offG, offB)\n    light.deactivate()\nend\n\nfunction turnOnLight(light, r, g, b)\n    light.setRGBColor(r, g, b)\n    light.activate()\nend\n\nfunction turnOffAllLights()\n    for k, v in ipairs(linkedLight) do\n        turnOffLight(v)\n    end\nend\n\nvalidate()\n\nscript.onStart()"},{"key":"1","filter":{"slotKey":-1,"signature":"stop()","args":[]},"code":"if script.onStop then script.onStop(unit) end"},{"key":"2","filter":{"slotKey":-1,"signature":"tick(timerId)","args":[{"variable":"*"}]},"code":"if script.onTick then script.onTick(timerId,unit) end"},{"key":"3","filter":{"slotKey":-2,"signature":"actionStart(action)","args":[{"variable":"*"}]},"code":"if script.onActionStart then script.onActionStart(action,system) end"},{"key":"4","filter":{"slotKey":-2,"signature":"actionStop(action)","args":[{"variable":"*"}]},"code":"if script.onActionStop then script.onActionStop(action,system) end"},{"key":"5","filter":{"slotKey":-2,"signature":"actionLoop(action)","args":[{"variable":"*"}]},"code":"if script.onActionLoop then script.onActionLoop(action,system) end"},{"key":"6","filter":{"slotKey":-2,"signature":"update()","args":[]},"code":"if script.onUpdate then script.onUpdate(system) end"},{"key":"7","filter":{"slotKey":-2,"signature":"flush()","args":[]},"code":"if script.onFlush then script.onFlush(system) end"}],"methods":[],"events":[]}