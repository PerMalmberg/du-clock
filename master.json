{"slots":{"0":{"name":"slot1","type":{"methods":[],"events":[]}},"1":{"name":"slot2","type":{"methods":[],"events":[]}},"2":{"name":"slot3","type":{"methods":[],"events":[]}},"3":{"name":"slot4","type":{"methods":[],"events":[]}},"4":{"name":"slot5","type":{"methods":[],"events":[]}},"5":{"name":"slot6","type":{"methods":[],"events":[]}},"6":{"name":"slot7","type":{"methods":[],"events":[]}},"7":{"name":"slot8","type":{"methods":[],"events":[]}},"8":{"name":"slot9","type":{"methods":[],"events":[]}},"9":{"name":"slot10","type":{"methods":[],"events":[]}},"-1":{"name":"unit","type":{"methods":[],"events":[]},"_elementType":"control"},"-2":{"name":"system","type":{"methods":[],"events":[]},"_elementType":"system"},"-3":{"name":"library","type":{"methods":[],"events":[]},"_elementType":"library"}},"handlers":[{"key":"0","filter":{"slotKey":-1,"signature":"start()","args":[]},"code":"package.preload['link_elements'] = (function (...)\nlinkedCore = nil\r\nlinkedScreen = {}\r\nlinkedContainer = {}\r\nlinkedSwitch = {}\r\nlinkedButton = {}\r\nlinkedEmitter = {}\r\nlinkedReceiver = {}\r\nlinkedLight = {}\r\nlinkedIndustry = {}\r\nlinkedDatabank = {}\r\n\r\nlocal slots = {slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8, slot9, slot10}\r\n\r\nfunction linkElements()\r\n    for i = 1, #slots do\r\n        if slots[i] ~= nil then\r\n            local elementClass = slots[i].getElementClass()\r\n\r\n            if elementClass == 'CoreUnitStatic'\r\n            or elementClass == 'CoreUnitSpace'\r\n            or elementClass == 'CoreUnitDynamic' then\r\n                linkedCore = slots[i]\r\n            elseif (elementClass == 'ScreenUnit') then\r\n                table.insert(linkedScreen, #linkedScreen + 1, slots[i])\r\n            elseif (elementClass == 'ItemContainer') then\r\n                table.insert(linkedContainer, #linkedContainer + 1, slots[i])\r\n            elseif (elementClass == 'ManualSwitchUnit') then\r\n                table.insert(linkedSwitch, #linkedSwitch + 1, slots[i])\r\n            elseif (elementClass == 'ManualButtonUnit') then\r\n                table.insert(linkedButton, #linkedButton + 1, slots[i])\r\n            elseif (elementClass == 'EmitterUnit') then\r\n                table.insert(linkedEmitter, #linkedEmitter + 1, slots[i])\r\n            elseif (elementClass == 'ReceiverUnit') then\r\n                table.insert(linkedReceiver, #linkedReceiver + 1, slots[i])\r\n            elseif (elementClass == 'LightUnit') then\r\n                table.insert(linkedLight, #linkedLight + 1, slots[i])\r\n            elseif (elementClass == 'IndustryUnit') then\r\n                table.insert(linkedIndustry, #linkedIndustry + 1, slots[i])\r\n            elseif (elementClass == 'DataBankUnit') then\r\n                table.insert(linkedDatabank, #linkedDatabank + 1, slots[i])\r\n            else                \r\n                system.print(elementClass)\r\n            end\r\n        end\r\n    end\r\nend\r\n end)\npackage.preload['time_util'] = (function (...)\nTimeUtil = {}\n\nfunction TimeUtil.getTime(value)\n    o = {}\n    local now = value or system.getTime()\n    o.day = math.floor(now / (24*3600))\n    now = now % (24 * 3600)\n    o.hour = math.floor(now / 3600)\n    now = now % 3600\n    o.minute = math.floor(now / 60)\n    now = now % 60\n    o.second = math.floor(now)\n    return o\nend\n\nfunction TimeUtil.getClientTime()\n    return system.getTime()\nend end)\nrequire('link_elements')\nrequire('time_util')\n\n--[[\n\nMaster clock device. v0.0.1\n\nHardware setup:\n\nLink to\n - A transfer unit setup to transfer screws or anything else between two empty containers. Don't use a unit used for production.\n - The common databank\n - Three buttons, _in this exact order_:\n  - A \"Manual Switch\" (this is the time setup-switch)\n  - A second \"Manual Switch\" that is in turn connected to a relay, that in turn is connected to the slave devices.\n  - A third \"Manual Switch\", that will be used to as in the activation hold circuit to prevent the board to turn off as soon as the player leaves the DZ area.\n \n Activation circuit, link as follows:\n - Detection zone, linked to an OR-operator\n - Hold switch, referenced above, to the same OR-operator\n - OR-operator output linked to the board.\n\nSetup:\n- Enable the setup-switch and activate the programming board to set the base time.\n\nDon't turn off the transfer unit unit or you will have to redo the setup process.\n\n]]--\n\nlocal onColor = \"128 0 0\" --export: The color, in RGB, used when the light is on, defaults to 128 0 0. Reset clock to apply.\nlocal offColor = \"128 128 0\" --export: The color, in RGB, used when the light is off. Reset clock to apply.\nlocal secondaryFillColor = \"0 64 0\" --export: the color, in RGB, used as the secondary color when in filling display mode.\nlocal displayMode = 1 --export: Display mode, 0 for single light, 1 for fill. Reset clock to apply.\nlocal shutdownDistance = 100 --export: The distance at which to shutdown the clock to prevent hard-off if the player moves to far away. Can't be much larger than 100m as elements seem to load out at that point.\n\nscript = {}\n\n\nlocal SETUP_SWITCH = 1\nlocal SLAVE_SWITCH = 2\nlocal HOLD_SWITCH = 3\n\nfunction script.onStart()\n    unit.hide()\n    linkElements()\n\n    if linkedSwitch[SETUP_SWITCH].getState() == 1 then\n        system.print(\"Setting base time to current time.\")\n        linkedDatabank[1].setIntValue(\"base\", math.ceil(TimeUtil.getClientTime()))\n        linkedSwitch[SETUP_SWITCH].deactivate()\n        linkedIndustry[1].hardStop(1)\n        linkedIndustry[1].startAndMaintain(1)\n\n        linkedDatabank[1].setStringValue(\"offcolor\", offColor)\n        linkedDatabank[1].setStringValue(\"oncolor\", onColor)\n        linkedDatabank[1].setStringValue(\"secondaryfillcolor\", secondaryFillColor)\n        linkedDatabank[1].setIntValue(\"displaymode\", displayMode)\n    end\n\n    -- Turn on hold circuit\n    linkedSwitch[HOLD_SWITCH].activate()\n\n    -- Turn on slave devices\n    linkedSwitch[SLAVE_SWITCH].activate()\n\n    unit.setTimer(\"second\", 1)\nend\n\nfunction isPlayerWithinRange()\n    local dist = vec3(unit.getMasterPlayerRelativePosition()):len()\n    return dist < shutdownDistance\nend\n\nfunction script.onStop()\n    -- Turn off slave devices\n    linkedSwitch[SLAVE_SWITCH].deactivate()\n    -- Turn off hold circuit\n    linkedSwitch[HOLD_SWITCH].deactivate()\n    -- Do not turn off the industy unit.\nend\n\n\nfunction script.onTick(event)\n    if isPlayerWithinRange() then\n        if event == \"second\" then\n            local uptime = linkedIndustry[1].getUptime()\n            if uptime ~= nil then\n                local elapsed = math.floor(uptime)\n                linkedDatabank[1].setIntValue(\"elapsed\", elapsed)\n            else\n                -- We end up here when moving to far from the core/industy unit.\n                unit.exit()\n            end\n        end\n    else\n        -- Player has moved away, shutdown to prevent hard-stop later which leaves the clock in a frozen state.\n        unit.exit()\n    end\nend\n\n\nscript.onStart()"},{"key":"1","filter":{"slotKey":-1,"signature":"stop()","args":[]},"code":"if script.onStop then script.onStop(unit) end"},{"key":"2","filter":{"slotKey":-1,"signature":"tick(timerId)","args":[{"variable":"*"}]},"code":"if script.onTick then script.onTick(timerId,unit) end"},{"key":"3","filter":{"slotKey":-2,"signature":"actionStart(action)","args":[{"variable":"*"}]},"code":"if script.onActionStart then script.onActionStart(action,system) end"},{"key":"4","filter":{"slotKey":-2,"signature":"actionStop(action)","args":[{"variable":"*"}]},"code":"if script.onActionStop then script.onActionStop(action,system) end"},{"key":"5","filter":{"slotKey":-2,"signature":"actionLoop(action)","args":[{"variable":"*"}]},"code":"if script.onActionLoop then script.onActionLoop(action,system) end"},{"key":"6","filter":{"slotKey":-2,"signature":"update()","args":[]},"code":"if script.onUpdate then script.onUpdate(system) end"},{"key":"7","filter":{"slotKey":-2,"signature":"flush()","args":[]},"code":"if script.onFlush then script.onFlush(system) end"}],"methods":[],"events":[]}